<?php
/*
* 2007-2016 PrestaShop
*
* NOTICE OF LICENSE
*
* This source file is subject to the Open Software License (OSL 3.0)
* that is bundled with this package in the file LICENSE.txt.
* It is also available through the world-wide-web at this URL:
* http://opensource.org/licenses/osl-3.0.php
* If you did not receive a copy of the license and are unable to
* obtain it through the world-wide-web, please send an email
* to license@prestashop.com so we can send you a copy immediately.
*
* DISCLAIMER
*
* Do not edit or add to this file if you wish to upgrade PrestaShop to newer
* versions in the future. If you wish to customize PrestaShop for your
* needs please refer to http://www.prestashop.com for more information.
*
*  @author PrestaShop SA <contact@prestashop.com>
*  @copyright  2007-2016 PrestaShop SA
*  @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
*  International Registered Trademark & Property of PrestaShop SA
*/

/**
 * History of receipts
 * @since 1.5.0
 */
class SupplyOrderVoucher extends ObjectModel
{
    /**
     * @var int Detail of the Voucher (1 voucher many product to receipt)
     */
    public $id_supply_order_voucher;

    /**
     * @var int Detail of the Voucher (1 voucher many product to receipt)
     */
    public $id_supply_order;


    /**
     * @var int Detail of the Voucher (1 voucher many product to receipt)
     */
    public $name;

   /**
     * @var int Currency used to buy this particular product
     */
    public $id_currency;

    /**
     * @var int Employee
     */
    public $price_te = 0;

    /**
     * @var int Employee
     */
    public $quantity_expected = 0;

    /**
     * @var int Employee
     */
    public $quantity = 0;

       /**
     * @var int Product EAN13
     */
    public $ean13;

    /**
     * @var string UPC
     */
    public $upc;


    /**

     * @var string Date of delivery
     */
    public $date_add;



    /**
     * @see ObjectModel::$definition
     */
    public static $definition = array(
        'table' => 'supply_order_voucher',
        'primary' => 'id_supply_order_voucher',
        'fields' => array(
             'name' =>       array('type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => true),
              'ean13' =>                            array('type' => self::TYPE_STRING, 'validate' => 'isEan13'),
            'upc' =>                            array('type' => self::TYPE_STRING, 'validate' => 'isUpc'),
            'id_currency' =>                    array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => true),
            'id_supply_order' =>                    array('type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => true),
             'quantity_expected' =>                array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt', 'required' => true),
            'quantity' =>                array('type' => self::TYPE_INT, 'validate' => 'isUnsignedInt'),
            'price_te' =>                        array('type' => self::TYPE_FLOAT, 'validate' => 'isPrice', 'required' => true),
            'date_add' =>                array('type' => self::TYPE_DATE, 'validate' => 'isDate'),
        ),
    );

    /**
     * @see ObjectModel::$webserviceParameters
     */
    protected $webserviceParameters = array(
        'objectsNodeName' => 'supply_order_vouchers',
        'objectNodeName' => 'supply_order_voucher',
        'fields' => array(
            'id_supply_order' => array('xlink_resource' => 'supply_orders'),
            'id_supply_order_history' => array('xlink_resource' => 'supply_order_histories'),
        ),
    );

    public function getlastvoucherid($id_last_supply_voucher)
    {
        $_query = 'select id_supply_order_voucher from '._DB_PREFIX_.'supply_order_voucher where id_supply_order = '.$id_last_supply_voucher.' order by id_supply_order_voucher desc';

        return Db::getInstance()->getvalue($_query);


    }

  public function getEntriesCollectionVoucher()
    {
        $details = new PrestaShopCollection('SupplyOrderVoucher');
        $details->where('id_supply_order_voucher', '=', 1);


        return $details;
    }


      /**
     * @see ObjectModel::hydrate()
     */
    public function hydrate(array $data, $id_lang = null)
    {
        $this->id_lang = $id_lang;
        if (isset($data[$this->def['primary']])) {
            $this->id = $data[$this->def['primary']];
        }

        foreach ($data as $key => $value) {

            if (array_key_exists($key, $this)) {
                // formats prices and floats
                if ($this->def['fields'][$key]['validate'] == 'isFloat' ||
                    $this->def['fields'][$key]['validate'] == 'isPrice') {
                    $value = Tools::ps_round($value, 6);
                }
                $this->$key = $value;
            }
        }

       
    }



}
